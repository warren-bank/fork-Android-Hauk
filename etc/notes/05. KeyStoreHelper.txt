--------------------------------------------------------------------------------

file: android\app\src\main\java\info\varden\hauk\system\security\KeyStoreHelper.java

--------------------------------------------------------------------------------

https://developer.android.com/reference/java/security/KeyStore
https://developer.android.com/reference/java/security/InvalidKeyException
https://developer.android.com/reference/javax/crypto/KeyGenerator
https://developer.android.com/reference/javax/crypto/SecretKey
https://developer.android.com/reference/javax/crypto/Cipher
  API 1

https://developer.android.com/reference/javax/crypto/spec/GCMParameterSpec
  API 19

https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec
https://developer.android.com/reference/android/security/keystore/KeyProperties
  API 23

--------------------------------------------------------------------------------

https://developer.android.com/reference/android/security/KeyPairGeneratorSpec
https://developer.android.com/reference/android/security/KeyPairGeneratorSpec.Builder
  API 18 (deprecated in API 23)

--------------------------------------------------------------------------------

current code (API 23+):
=======================

public final class KeyStoreHelper {
  public KeyStoreHelper(KeyStoreAlias alias) {
    KeyGenerator keygen = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, ANDROID_KEY_STORE);
    KeyGenParameterSpec spec = new KeyGenParameterSpec.Builder(alias.getAlias(), KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
        .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
        .build();
  }
}

equivalent code (API 18+):
==========================

import android.content.Context;
import android.os.Build;
import android.security.KeyPairGeneratorSpec;

import java.security.spec.AlgorithmParameterSpec;

public final class KeyStoreHelper {
  private static Context context;

  public static void initStaticResources(Context context) {
    KeyStoreHelper.context = context;
  }

  public KeyStoreHelper(KeyStoreAlias alias) {
    try {
      // Load the key store if not already loaded.
      if (store == null) loadKeyStore();

      // Check if the alias exists. If not, create it.
      if (!store.containsAlias(alias.getAlias())) {
        Log.i("Generating new key for alias %s", alias); //NON-NLS

        KeyGenerator keygen = KeyGenerator.getInstance("AES", ANDROID_KEY_STORE);
        AlgorithmParameterSpec spec = this.getAlgorithmParameterSpec(alias);
        keygen.init(spec);
        this.key = keygen.generateKey();
      }
      else {
        Log.i("Loading existing key for alias %s", alias); //NON-NLS
        KeyStore.SecretKeyEntry keyEntry = (KeyStore.SecretKeyEntry) store.getEntry(alias.getAlias(), null);
        this.key = keyEntry.getSecretKey();
      }
    }
    catch (Exception e) {
      Log.e("Unable to load key store or generate keys", e); //NON-NLS
    }
  }

  private AlgorithmParameterSpec getAlgorithmParameterSpec(KeyStoreAlias alias) throws Exception {
    if (Build.VERSION.SDK_INT >= 23) {
      KeyGenParameterSpec spec = new KeyGenParameterSpec.Builder(alias.getAlias(), KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
        .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
        .build();

      return spec;
    }
    else if (Build.VERSION.SDK_INT >= 18) {
      if (KeyStoreHelper.context != null) {

        KeyPairGeneratorSpec spec = new KeyPairGeneratorSpec.Builder(KeyStoreHelper.context)
          .setAlias(alias.getAlias())
          .setKeyType("AES")
          .build();

        return spec;
      }
      else {
        throw new Exception("Context is null");
      }
    }
    else {
      throw new Exception("AlgorithmParameterSpec subclass is not supported");
    }
  }
}

--------------------------------------------------------------------------------

initStaticResources:
====================

file: android\app\src\main\AndroidManifest.xml
TODO: override Application class
code:
  <application
    android:name=".App"

file: android\app\src\main\java\info\varden\hauk\App.java
code:

----------------------------------------

package info.varden.hauk;

import info.varden.hauk.http.security.TLSSocketFactory; // copy from: https://github.com/warren-bank/Android-WebMonkey/blob/v04/android-studio-project/WebMonkey/src/main/java/com/github/warren_bank/webmonkey/extras/TLSSocketFactory.java
import info.varden.hauk.system.security.KeyStoreHelper;

import android.app.Application;
import android.os.Build;

import javax.net.ssl.HttpsURLConnection;

public class App extends Application {
  @Override
  public void onCreate() {
    super.onCreate();

    if (
      (Build.VERSION.SDK_INT >= 16) &&
      (Build.VERSION.SDK_INT <  20)
    ) {
      try {
        TLSSocketFactory socketFactory = new TLSSocketFactory();

        HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);
      }
      catch(Exception e) {}
    }

    if (
      (Build.VERSION.SDK_INT >= 18) &&
      (Build.VERSION.SDK_INT <  23)
    ) {
      try {
        KeyStoreHelper.initStaticResources(
          getApplicationContext()
        );
      }
      catch(Exception e) {}
    }
  }
}

--------------------------------------------------------------------------------
